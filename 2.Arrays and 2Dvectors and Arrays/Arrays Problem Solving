#include <iostream>
#include <limits.h>
#include <string>
#include <vector>
using namespace std;
// 2149. Rearrange Array Elements by Sign



// 48. Rotate Image

void rotate(vector<int> &nums, int k) {
    int n = nums.size();
    k %= n; // To handle cases where k > n

    if (k == 0) // If k is 0, no rotation needed
        return;

    for (int i = 0; i < n / 2; ++i) {
        int temp = nums[i];
        nums[i] = nums[n - k - 1 - i];
        nums[n - k - 1 - i] = temp;
    }

    for (int i = 0; i < k / 2; ++i) {
        int temp = nums[n - k + i];
        nums[n - k + i] = nums[n - 1 - i];
        nums[n - 1 - i] = temp;
    }

    for (int i = 0; i < n / 2; ++i) {
        int temp = nums[i];
        nums[i] = nums[n - 1 - i];
        nums[n - 1 - i] = temp;
    }
}

int main() {
    vector<int> arr = {10, 20, 30, 40, 50, 60};
    int k = 2;

    rotate(arr, k);

    for (int num : arr) {
        cout << num << " ";
    }

    return 0;
}















// 2643. Row With Maximum Ones


vector<int> rowAndMaximumOnes(vector<vector<int>> &mat) {
  int maxCount = INT_MIN;
  int n = mat.size();
  int rowNo;
  vector<int> ans;

  for (int i = 0; i < n; i++) {
    int count = 0;
    for (int j = 0; j < mat[i].size(); j++) {
      if (mat[i][j] == 1) {
        count++;
      }
    }

    if (count > maxCount) {
      maxCount = count;
      rowNo = i;
    }
  }
  ans.push_back(rowNo);
  ans.push_back(maxCount);
  return ans;
}

int main() {

  vector<vector<int>> mat = {{1, 0}, {0, 1}, {1, 1}};

  vector<int> result = rowAndMaximumOnes(mat);
  for (int i = 0; i < result.size(); i++) {
    cout << result[i] << " ";
  }
  cout << endl;
  return 0;
}














// 268. Missing Number
    int missingNumber(vector<int>& nums) {
        int sum = 0;
        int n = nums.size();
        for(int i = 0 ; i< n ; i++){
            sum = sum+ nums[i];
        }

        int totalsum  = ((n)*(n+1))/2;
        int ans = totalsum - sum;
        return ans;
    }

void rotate(vector<int> &nums, int k) {
  int n = nums.size();

  vector<int> ans(n);
  for (int i = 0; i < n; i++) {
    int newindex = (i + k) % n;
    ans[newindex] = nums[i];
  }
  nums = ans;
}

int main() {

  vector<int> arr = {10, 20, 30, 40, 50, 60};
  int k = 2;
  // sortColour(arr);

  rotate(arr, k);
  for (int num : arr) {
    cout << num << " ";
  }

  return 0;
}

// void sortColour(vector<int> &nums) {

//      int n = nums.size();
//   int left = 0, right = n - 1;
// //   int index = 0;
//  for (int index = 0; index <= right;) {
//     if (nums[index] == 0) {
//       swap(nums[index], nums[left]);
//       index++;
//       left++;

//     } else if (nums[index] == 2) {
//       swap(nums[index], nums[right]);
//       right--;
//     } else {
//       index++;
//     }
//   }
// }
//   while (index <= right) {
//     if (nums[index] == 0) {
//       swap(nums[index], nums[left]);
//       left++;
//       index++;
//     } else if (nums[index] == 2) {
//       swap(nums[index], nums[right]);
//       right--;
//     } else {
//       index++;
//     }
//   }




//   int zero = 0;
//   int one = 0;
//   int two = 0;

//   for (int i = 0; i < nums.size(); i++) {
//     if (nums[i] == 0) {
//       zero++;
//     } else if (nums[i] == 1) {
//       one++;
//     } else {
//       two++;
//     }
//   }

//   int index = 0;
//   for (int i = 0; i < zero; i++) {
//     nums[index++] = 0;
//   }
//   for (int i = 0; i < one; i++) {
//     nums[index++] = 1;
//   }
//   for (int i = 0; i < two; i++) {
//     nums[index++] = 2;
//   }
}

int main() {

  vector<int> arr = {2, 0, 2, 1, 1, 0};

  sortColour(arr);
  for (int num : arr) {
    cout << num << " ";
  }

  return 0;
}